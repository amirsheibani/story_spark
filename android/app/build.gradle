def localProperties = new Properties()
def localPropertiesFile = rootProject.file('local.properties')
if (localPropertiesFile.exists()) {
    localPropertiesFile.withReader('UTF-8') { reader ->
        localProperties.load(reader)
    }
}

def flutterRoot = localProperties.getProperty('flutter.sdk')
if (flutterRoot == null) {
    throw new GradleException("Flutter SDK not found. Define location with flutter.sdk in the local.properties file.")
}

def flutterVersionCode = localProperties.getProperty('flutter.versionCode')
if (flutterVersionCode == null) {
    flutterVersionCode = '1'
}

def flutterVersionName = localProperties.getProperty('flutter.versionName')
if (flutterVersionName == null) {
    flutterVersionName = '1.0'
}

apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply from: "$flutterRoot/packages/flutter_tools/gradle/flutter.gradle"

android {
    namespace "ai.storyspark.app"
    compileSdkVersion flutter.compileSdkVersion
    ndkVersion flutter.ndkVersion

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    kotlinOptions {
        jvmTarget = '1.8'
    }

    sourceSets {
        main.java.srcDirs += 'src/main/kotlin'
    }

    defaultConfig {
        applicationId "ai.storyspark.app"
        minSdkVersion 23
        targetSdkVersion flutter.targetSdkVersion
        versionCode flutterVersionCode.toInteger()
        versionName flutterVersionName
    }
//    signingConfigs {
//        release {
//            keyAlias releaseKeyProperties['keyAlias']
//            keyPassword releaseKeyProperties['keyPassword']
//            storeFile releaseKeyProperties['storeFile'] ? file(releaseKeyProperties['storeFile']) : null
//            storePassword releaseKeyProperties['storePassword']
//        }
//        debug{
//            storeFile debugKeyProperties['storeFile'] ? file(debugKeyProperties['storeFile']) : null
//        }
//    }

    buildTypes {
//        release {
//            signingConfig signingConfigs.release
//            shrinkResources false
//            minifyEnabled false
//        }
        release {
            signingConfig signingConfigs.debug
        }
        debug {
            signingConfig signingConfigs.debug
        }
    }

    flavorDimensions "app"
    productFlavors {
        dev {
            dimension "app"
            resValue "string", "app_name", "Dev FlavoreTest"
            applicationIdSuffix ".dev"
            versionNameSuffix ".dev"
        }
        stage {
            dimension "app"
            resValue "string", "app_name", "Stage FlavoreTest"
            applicationIdSuffix ".stage"
            versionNameSuffix ".stage"
        }
        prod {
            dimension "app"
            resValue "string", "app_name", "Stage FlavoreTest"
        }
    }
    lintOptions {
        checkReleaseBuilds false
    }

}

flutter {
    source '../..'
}

dependencies {
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
    implementation platform('com.google.firebase:firebase-bom:31.1.1')
    implementation 'com.google.firebase:firebase-analytics-ktx'
    implementation 'com.google.firebase:firebase-auth-ktx'
    implementation 'com.google.firebase:firebase-messaging-ktx'
    implementation 'com.google.android.gms:play-services-maps:18.1.0'
    implementation 'com.google.android.gms:play-services-location:21.0.1'
    implementation 'com.google.android.gms:play-services-gcm:17.0.0'
    implementation 'com.android.support:multidex:1.0.3'
}
